#!/bin/python
# PYTHON_ARGCOMPLETE_OK

import argparse
import pickle
import os
import sys
import signal
import argcomplete

folder_blacklist = ["node_modules", ".metadata",
                    "nexus-3.7.1-02", "venv", "golang.org"]


def search_for_workspace_folders(path):
    directories = os.listdir(path)

    if (".git" in directories) or (".svn" in directories):
        project_name = os.path.split(path)[-1]
        return {project_name: [path]}

    result = {}
    for dir_name in directories:
        directory = os.path.join(path, dir_name)
        if os.path.isdir(directory) and dir_name not in folder_blacklist:
            new_projects = search_for_workspace_folders(directory)
            for key in new_projects:
                if key in result:
                    result[key].extend(new_projects[key])
                else:
                    result[key] = new_projects[key]

    return result


def load_projects(update_cache: bool=False):
    script_path = os.path.dirname(os.path.realpath(__file__))

    projects_cache = os.path.join(script_path, "projects_cache.bin")
    if os.path.isfile(projects_cache) and not update_cache:
        try:
            with open(projects_cache, 'rb') as f:
                return pickle.load(f)
        except:
            os.remove(projects_cache)

    workspace_file = os.path.join(script_path, "workspace.txt")
    if os.path.isfile(workspace_file):
        with open(workspace_file, 'r') as f:
            workspace_path = f.readlines()[0]

        projects = search_for_workspace_folders(workspace_path)
        with open(projects_cache, 'wb+') as f:
            pickle.dump(projects, f)

        return projects
    else:
        print("Could not find workspace.txt.")
        exit(1)


def ProjectDirectoryCompleter(projects: dict):
    def wrapped_func(prefix, **kwargs):
        if len(projects) == 0:
            argcomplete.warn(
                "No projects found. (Did you create workspace.txt?)")

        def filter_projects(p: dict):
            return list(filter(lambda key: key.startswith(prefix), p.keys()))

        result = filter_projects(projects)
        if len(result) == 0:
            loaded_projects = load_projects(True)
            result = filter_projects(loaded_projects)
        return result

    return wrapped_func


def main():
    projects = load_projects()

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "project", nargs='+').completer = ProjectDirectoryCompleter(projects)
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    project_name = args.project[0]
    if project_name in projects:
        paths = projects[project_name]
    else:
        print(f"Could not find any project with name '{project_name}'")
        return

    def open_terminal(index: int):
        os.system(f"gnome-terminal --working-directory=\"{paths[index]}\"")

    if len(paths) == 1:
        open_terminal(0)
    elif len(args.project) == 2:
        open_terminal(int(args.project[1]))
    else:
        for index, path in enumerate(paths):
            print(f"{index}: {path}")
        print("Please select a directory to go to by adding the number at the end.")
    
    os.kill(os.getppid(), signal.SIGKILL)

if __name__ == '__main__':
    main()
